// 下面的几个%，由于版本或前缀，所以设计成%
//-----------------------------------------------------
// flex
%display-flex {
    display: flex;
}

@mixin width-varint($i) {
    .wd-#{$i} {
        @include inline-block();
        width: #{$i}% !important;
    }
}

// fixed top or bottom or bottom & top
@mixin fixed($pos: 0) {
    position: fixed;
    left: 0;
    right: 0;
    @if $pos==bottom {
        bottom: 0;
    }
    @else if $pos==all {
        top: 0;
        bottom: 0;
    }
    @else {
        top: $pos;
    }
}

%fixed-top {
    @include fixed;
}

%fixed-bottom {
    @include fixed(bottom);
}

// justify 
// 左右对齐
@mixin justify($extend: true) {
    @if $extend {
        @extend %justify;
    }
    @else {
        display: flex;
        justify-content: space-between;
    }
}

%justify {
    @include justify(false);
}

// mixin
// 只定义了mixin，所以只能通过@include来调用
//-----------------------------------------------------
// table 等
// $child 参数请使用单引号，因为用于子元素选择器
@mixin equal-table($child: 'li') {
    display: table;
    table-layout: fixed;
    width: 100%;
    #{unquote($child)} {
        display: table-cell;
    }
}

// flex 等分
// $child 参数请使用单引号，因为用于子元素选择器
@mixin equal-flex($child: 'li') {
    display: flex;
    #{unquote($child)} {
        flex: 1;
        width: 1%;
    }
}

// line equal gap
// $child 参数请使用单引号，因为用于子元素选择器
@mixin line-equal-gap($gap: 10px, $child: 'li', $lr: true) {
    display: flex;
    @if $lr {
        padding-left: $gap;
        padding-right: $gap;
    }
    #{unquote($child)} {
        flex: 1;
        width: 1%;
        
        //     &:not(: first-of-type) {
    //     margin-left: $gap;
    // }

    }
}

// line equal item
@mixin line-equal-item($lr: true) {
    display: flex;
    justify-content: space-between;
    @if $lr {
        &::before,
        &::after {
            content: "";
        }
    }
}

// flex center
@mixin center-flex($direction: both) {
    display: flex;
    @if $direction==both {
        justify-content: center;
        align-items: center;
    }
    @else if $direction==x {
        justify-content: center;
    }
    @else if $direction==y {
        align-items: center;
    }
}

// translate center
@mixin center-translate($direction: both) {
    position: absolute;
    @if $direction==both {
        top: 50%;
        left: 50%;
        transform: translate3d(-50%, -50%, 0);
    }
    @else if $direction==x {
        left: 50%;
        transform: translate3d(-50%, 0, 0);
    }
    @else if $direction==y {
        top: 50%;
        transform: translate3d(0, -50%, 0);
    }
}

// object wrap
// $child 参数请使用单引号，因为用于子元素选择器
@mixin object-wrap($percent: 100%, $child: 'img') {
    position: relative;
    padding-top: $percent;
    height: 0;
    #{unquote($child)} {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}

// selector
// 改变父元素状态，如:hover或.active
// 父元素不能有组合选择器，如.a, .b{}
// .parent{
//     .child{
//         @include parent-state(":hover"){
//             color: #f00;
//         }
//     }
// }
// .parent:hover .child {
//     color: #f00;
// }
@mixin parent-state($states...) {
    $parent: nth(nth(&, 1), (length(nth(&, 1))-1));
    @each $state in $states {
        @at-root #{selector-replace(&, $parent, str-insert($state, $parent, 0))} {
            @content;
        }
    }
}
